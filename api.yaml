swagger: '2.0'
info:
  title: Employee Management Portal API docs
  description : This is Employee Management project API docs.
  version: 1.0
  licence :
    name: Apache 2.0
    url: 'http://apache.org/'

  servers:
    -url: 'http://loaclhost:3000/'
    description: This is my local server.

schemes: ['http','https']


paths:

  /erp:
    get:
      summary : To get all employees
      description: This API returns the list of all employees in the ERP system.
      tags: 
        - Employee
      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/Employee'   
        400:
          description: Bad request.
          schema :
            $ref: '#/components/schemas/Failure'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'
      
  /erp/{id}:
    get:
      summary: Getting a particular employee details
      description : This api returns a employee object representing his all info
      tags: 
        - Employee
      parameters:
        - name: id
          in: path
          required: true
          schema :
            type : number

      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/Employee'   
        404:
          description: Not Found
          schema :
            $ref: '#/components/schemas/Failure'
        406:
          description: Not Acceptable Parameters.
          schema :
            $ref: '#/components/schemas/Failure'
        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

    put:
      summary: Updating a particular employee details
      description : This api updates a employee object representing his all info
      tags: 
        - Employee
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          schema :
            type : number
        - in: body
          name: user
          schema:
            $ref: '#/components/schemas/User'
      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/Employee'
        404:
          description: Not found.
          schema :
            $ref: '#/components/schemas/Failure'
        406:
          description: Not Acceptable Parameters.
          schema :
            $ref: '#/components/schemas/Failure'
        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

    delete:
      summary: deleting a particular employee details
      description : This api deletes a employee informatino from ERP system.
      tags: 
        - Employee
      produces: 
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          schema :
            type : number
      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/Employee'
        404:
          description: Not Found
          schema :
            $ref: '#/components/schemas/Failure'
        406:
          description: Not Acceptable Parameters.
          schema :
            $ref: '#/components/schemas/Failure'
        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

  /erp/create:
    post:
      summary: API to create user in system
      description: This API is used to create a user in ERP system using provided data.
      tags: 
        - Employee
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters:
      - in: body
        name: user
        schema:
          $ref: '#/components/schemas/User'
      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/Employee'
        404:
          description: Not Found
          schema :
            $ref: '#/components/schemas/Failure'
        406:
          description: Not Acceptable Parameters.
          schema :
            $ref: '#/components/schemas/Failure'

        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'
  
  /personal/{id}:
    get:
      summary: Getting a particular employee personal information details
      description : This api returns a employee personal information object representing his all info.
      tags: 
        - Personal
      parameters:
        - name: id
          in: path
          required: true
          schema :
            type : number

      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/PersonalInfo'   
        404:
          description: Not Found
          schema :
            $ref: '#/components/schemas/Failure'
        406:
          description: Not Acceptable Parameters.
          schema :
            $ref: '#/components/schemas/Failure'
        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'
  /personal:
    post:
      summary: API to create user personal information in system
      description: This API is used to create a users personal information in ERP system using provided data.
      tags: 
        - Personal
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters:
      - in: body
        name: user
        schema:
          $ref: '#/components/schemas/Personal'
      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/PersonalInfo'
        404:
          description: Not Found
          schema :
            $ref: '#/components/schemas/Failure'
        406:
          description: Not Acceptable Parameters.
          schema :
            $ref: '#/components/schemas/Failure'

        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

  /professional:
    post:
      summary: API to create user professional information in system
      description: This API is used to create a users professional information in ERP system using provided data.
      tags: 
        - Professional
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters:
      - in: body
        name: user
        schema:
          $ref: '#/components/schemas/Professional'
      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/ProfessionalInfo'
        404:
          description: Not Found
          schema :
            $ref: '#/components/schemas/Failure'
        406:
          description: Not Acceptable Parameters.
          schema :
            $ref: '#/components/schemas/Failure'

        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

  /professional/{id}:
    get:
      summary: Getting a particular employee professional information details
      description : This api returns a employee professional information object representing his all info.
      tags: 
        - Professional
      parameters:
        - name: id
          in: path
          required: true
          schema :
            type : number

      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/ProfessionalInfo'   
        404:
          description: Not Found
          schema :
            $ref: '#/components/schemas/Failure'
        406:
          description: Not Acceptable Parameters.
          schema :
            $ref: '#/components/schemas/Failure'
        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

components:
  schemas:
    Employee:
      type: object
      properties:
        success:
          type: boolean 
          example: true
        data:
          type: object
          properties:
            name:
              type: string
              example: Mahesh
            DOB:
              type: string
              format: date
            skills:
              type: array
              items: 
                type: string
              example:
                - Typescript
                - node.js
            DOJ:
              type: string
              format: date
            level:
              type: string
              example: Intern
            supervisorId:
              type: number
              example: 1
    
    PersonalInfo:
      type: object
      properties:
        success:
          type: boolean 
          example: true
        data:
          type: object
          properties:
            empId:
              type: number
              example: 1
            address:
              type: string
              example: shivajinagar, Pune
            phoneNo:
              type: string
              format: ^[0-9]{10}$
              example: 9765040510
            emailId:
              type: string
              example: mahesh@gmail.com
            age:
              type: number
              example: 22
            bloodGroup:
              type: string
              example: A+
            hobbies:
              type: array
              items: 
                type: string
              example:
                - reading
                - coding
            married: 
              type: string
              example: not
            workingProfessional:
              type: string
              example: Yess
            
    ProfessionalInfo:
      type: object
      properties:
        success:
          type: boolean 
          example: true
        data:
          type: object
          properties:
            empId:
              type: number
              example: 1
            currentEmployeer:
              type: string
              example: ABC company
            previousEmployeer:
              type: string
              example: XYZ company
            salary:
              type: number
              exmpale: 100000
            highestEducation:
              type: string
              example: B.Tech
            highestEducationInstitute:
              type: string
              example: ABC college
            highestEducationGrades:
              type: number
              example: 9
       
    User:
      type: object
      properties:
        name:
          type: string
          example: Mahesh
        DOB:
          type: string
          format: date
        skills: 
          type: array
          items: 
            type: string
          example:
            - TypeScript
            - Node.js
        DOJ:
          type: string
          format: date
        level:
          type: string
          example: Intern
        supervisorId:
          type: number
          example: 1
    Personal:
      type: object
      properties:
        address:
          type: string
          example: shivajinagar, Pune
        phoneNo:
          type: string
          format: ^[0-9]{10}$
          example: 9765040510
        emailId:
          type: string
          example: mahesh@gmail.com
        age:
          type: number
          example: 22
        bloodGroup:
          type: string
          example: A+
        hobbies:
          type: array
          items: 
            type: string
          example:
            - reading
            - coding
        married: 
          type: string
          example: not
        workingProfessional:
          type: string
          example: Yess

    Professional:
      type: object
      properties:
        currentEmployeer:
          type: string
          example: ABC company
        previousEmployeer:
          type: string
          example: XYZ company
        salary:
          type: number
          exmpale: 100000
        highestEducation:
          type: string
          example: B.Tech
        highestEducationInstitute:
          type: string
          example: ABC college
        highestEducationGrades:
          type: number
          example: 9
        
    Failure:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          exmaple: "Required resource not found!"

    unProcessableEntity:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: object
          properties:
            schemaPath:
              type: boolean
              example : false
            message:
              type: string
              exmaple: "Unable to proecess the given request!"

